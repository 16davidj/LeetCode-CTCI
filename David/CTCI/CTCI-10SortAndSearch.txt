10.1 Sorted Merge

Work for the back, and insert the elements from each end of both arrays. This is because the back
is empty, so inserting an element in the back won't change anything. Also keep indices to keep
track of which index you are at for each array. If you insert in the front, you would have to
shift everything back.
(see E88-MergeSortedArray) similar: (E21-Merge2SortedLists.java)

10.2 Group Anagrams
Note: Going through a string array and sorting all the strings, then sorting the entire array is
a O(n log n). Why? Imagine there are s strings in the array, and each string is m characters long.
In order to sort each string in the array, it is a O(s) * O(m log m) = O(s*m log m)
operation (string comparison is O(1), important to remember later.)

In order to sort the entire array of strings, it is a O(m) * O(s log s) = O(m*s log s). There are
O(s log s) comparisons that the sort makes, but each string needs O(m) characters to compare. This
is because strings take more than just constant time to compare.

= O(m*s (log s + log m))

So the trade off is sorting each string and sorting the entire array, which takes O(m*s (log s +
log m)) but O(1) space, or sorting each string and putting it into a hashMap, which is more
pertinent to what the problem asks, since it doesn't ask the strings in order, which takes
O(ms log s) and O(m) space. Choose the latter.

Sort each string, and put the strings in a map, then go through the key entries of the map and
convert it to a list.

(see M49-GroupAnagrams.java)

10.3 Search in Rotated Array
The basic solution is that every time you split the array in half, there will be at least one side
that is sorted. Check the sorted side to see if the target belongs there, if not, go to the other
side. (so it's modified binary search, and instead of just comparing the target to the middle,
you have to compare the target to both sides to see where it may lie.)
(see M33-SearchInRotatedSortedArray.java)

10.4 Sorted Search

Binary search takes O(log n). We want to leverage this fact to do some preprocessing in log n time.
We want to binary search, but we don't know the high value, so it's hard to find the mid. If you
use a slo and fast pointer, you would only find the mid in O(n/2) time, which makes it O(n). Thus,
we use the power function. We try to estimate size by squaring 2 repeatedly until you find the
size value where it is out of bounds (-1). Then, this is the closest size we can find, and you
do binary search, but different, where if you hit -1, you treat it the same as if it is greater
than the mid (it is).

(see M702-SearchInASortedArrayUnknownSize)

10.5 Sparse Search
Modify binary search so that if mid is an empty string, you increase and decrease mid to find the
closest non-empty string, and go from there. The worst case scenario is O(n), where most of the List
is empty strings.

10.6 Sort Big File
RAM vs Storage. If you have a file up to 20 GB in storage, chances are you won't be able to load
all that into a program and then sort it. therefore, we should probably split it up into more
manageable chunks (a few MB per file), sort those files, then merge the chunks (it's known as
external sort, but its pretty similar to merge sort).

10.7 Missing Int
Since we have 1 GB (8 billion bits) of space, we can create a bit vector with 4 billion values,
and pass through all of them and set it to 1 if they exist. Then, do a second pass through to
find the first index.

Follow-up: (see book)

10.8 Find Duplicates
Use a bit-vector. Because you have 4KB, and each number can be stored in a bit, you have 32,000 bits
to use.

10.9 Sorted Matrix Search
Start from either top right or bottom left. This is because at each iteration, it's kind of like
binary search, where you need to search either half if the target is greater or less than what
you are right now. With top-right or bottom-left, you can go either less or more (for bottom left,
going right will increase your value, going up with decrease it). You need it to be either or to
reduce the matrix because if you to bottom right, the problem is that you'll always be decreasing
and from the top left, you'll always be increasing.

Bottom-left: If target is less, then go up. If target is more, go right.
(see M74-SearchA2DMatrixII) (similar: M240-SearchA2DMatrix)

10.10 Rank From Stream
Create a Rank Node, and create a BST from these nodes. This is your regular node, but it includes
the size of the left tree. You insert into the tree by calling insert on the tree, and if the node
lies to the left, then you increment the leftSize of that tree. If the left child is null, insert,
if not, recursively insert down the left subtree. Do not increment leftSize if you go down the
right subtree, because you aren't adding to the left subtree. The rank of a specific node is
dependent on where it lies. If you have to traverse the left subtree, then the rank is just rank of
the left subtree. If it is the current node, then the rank is just leftSize. If it is the right,
however, then you do leftSize + 1 + rank of the right

10.11 Peaks and Valleys
One thing that you can do is have all the odd indices be peaks, and all the even indices be
valleys. Then, you can imagine the problem as a subproblem. IF you imagine a sequence of 3 values
(as every peak and valley needs 3 values), you want to make sure you create a valley peak valley
regardless of the values. The easy way to do this is to find the max of the three and put that in
the middle. Now that you can do it with three, you want to apply that to the entire list. In order
to ensure that each odd index follows this rule, you start this rearranging and swapping to a
valley peak valley from index 1, and increment by 2 every time.

Note: Don't worry about a current rearranging of 3 to affect a past group of three. If you
are swapping with the left, which is part of a previous three, we know the left is a valley because
it's an even index. Swapping it with the middle means the middle is smaller than left, so the
valley is getting even smaller.

similar: (H295-FindMedianFromDataStream)

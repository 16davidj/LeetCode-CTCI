3.1 Three in One
Divisions: Divide the array into 3 parts. Each part represents a stack. Keep a currIndex for
all three parts of the array, as each index represents the top of the stack, and increment or
decrement depending on whether or not you are pushing or popping. If you run out of space for an
array, double the size of the array, and redistribute the array, amortized O(1) push and pop.

3.2 Stack Min
Keep the min value of the stack (so far) at every node. For example, when you pop, the min-value
associated with that stack node is the min for all the elements below. When you push, you compare
the value with the min value of the top of the stack (peek), and then set the min to that value if
it's less than that.

(see E155-MinStack.java)

3.3 Stack of Plates
use an ArrayList of stacks to keep track of all the stacks. You also want to keep a separate
ArrayList of sizes for each stack? You also want a variable to keep track of the capacity of
each stack to see if its full, and you also want to keep a variable to the last stack (or not
because an ArrayList can dynamically resize).

FOLLOW-UP: PopAt()
There are two scenarios for this, both are possible:
1. You popAt a certain index, so you pop the stack at the index and update the size and leave it
just like that. Many stacks will not be at capacity.

2. You have a rollover system, where if you pop at a certain index, you want to rollover all the
other elements from the stacks after that, which can be extremely expensive, and will cause you
to also have to add a bottom variable for each stack, and all the bottom variables must have a
next field in order to be able to update itself.

3.4 Queue via Stacks
Have two stacks. One stack is your basic stack, where the elements are arranged from oldest on
the bottom, and the newest on the top. This is for enqueuing items onto the stack. A second stack,
call it oldestStack, will have the oldest items on top and newest items on the bottom, which helps
for dequeuing items. Both stacks will have an isEmpty() function. If we pop twice, then we don't
want to move from newestStack to oldestStack, we just want to pop twice from oldestStack. If we
push twice, we just push onto newestStack. Essentially, oldest stack is a stack, and newest stack
is the reverse order.
(see E232-QueueViaStacks)

Also do: Stack via Queue:
Different concept, pushing takes O(n), as you push the newest element to the front of the queue by
removing all the other elements and adding them to the back. Then, popping is O(1), as you just
take from the beginning.
(see E225-StacksViaQueues)

3.5 Sort Stack
if not: Have a temporary stack and a count to see how many items have been pushed off. The temp
stack will contain the sorted stack. It is already sorted with the top having the smallest
elements. If you want to add an element, pop off from the top until the value is less than the
peek, and count how many times you pop. The pops will be stored on to the original stack, which
is why we have a count of how many times you pop, so you can pop off the original stack back on
to the temp stack. The temp stack will be sorted.

If requires for it to be in-place sorted:
Same concept as above, but the temporary stack is sorted with the biggest element on the top, and
at the end, you pop everything off and push it onto the original one.

(See- ?!?!?)

3.6 Animal Shelter: //assuming you only have one linkedList.
//if you have two linked lists, you can keep dogs in one, and cats in another.
public class Animal {
  int type;
  public Animal(int t) {
    type = t; //(0 for cat, 1 for dog)
  }
}

public AnimalShelter {
  public LinkedList<Animal> shelter;
  public AnimalShelter() {
    shelter = new LinkedList<Animal>();
  }
  public void enqueue(int type) {
    Animal temp = shelter;
    while(temp.next != null) {
      temp = temp.next;
    }
    temp.next = new Animal(t);
    temp.next.next = null;
  }
  public Animal dequeueAny() {
    Animal an = shelter.val;
    shelter = shelter.next;
    return an;
  }
  public Animal dequeueDog() {
    Animal dogNode = shelter;
    while(dogNode != null && dogNode.next.val != 1) {
      dogNode = dogNode.next;
    }
    if(dogNode.next.val == 1) {
      Animal an = dogNode.next;
      dogNode.next = dogNode.next.next;
      return an;
    }
    return null;
  }
  public Animal dequeueCat() {
    Animal catNode = shelter;
    while(catNode != null && catNode.next.val != 1) {
      catNode = catNode.next;
    }
    if(catNode.next.val == 1) {
      Animal an = catNode.next;
      catNode.next = catNode.next.next;
      return an;
    }
    return null;
  }
}

(See- ?!?!?)

4.1 Route between nodes
Run BFS from both nodes, and if they both touch the same node, return true. If BFS ends and they
don't touch, then there is no route.

Or just run BFS and see if the other node is in the visited list.

4.2 Minimal Tree
Get the middle as the root, and then run the function on the left and right side, with the resulting
trees being the left and right children. (Recursive)

(see E108-ConvertSortedArrayToBST) and (M109-ConvertSortedListToBST)

4.3 List of Depths
Have a hashMap that maps from depth to linkedList for that depth. Have a recursive function taking
in TreeNode and depth of that node, which adds to the hashMap, then recursively call the function
on its children with a depth that is 1 greater.

4.4 Check Balanced
use a helper function to not only explore the tree, but also pass up a value that
is either the height of the tree, or is -1 (meaning that the tree is not balanced). If -1 is
returned, you pop that -1 up to the original root and return that. If not, keep passing up the
heights, which will allow each level to compare the heights of the left or right child.
(see E110-BalancedBinaryTree)

4.5 Validate BST
Use recursion: it is not sufficient to check that root.left.val < current < root.right.val for
each node (draw an example, head root = 4, sub root = 3, but root.right.val = 100000000). Thus, we
need to make a upper and lower bound for each node, and update those bounds every time you
traverse a new level. The bounds are set by the parent node, since the everything on the left
of a parent node must be less, and everything on the right of the node must be greater.
(see M98-ValidateBST)

4.6 Successor
The successor will always be the leftmost child of the right subtree. However, if a right subtree
doesn't exist, then we are done with the in-order traversal (left, current, right), and we go up
to the parent. If the node was the left-child, then we return the parent, as the next node you
view is the current, or parent. If the node was the right-child, then you keep moving up until the
node is no longer the right child of the parent.
(see M285-InOrderSuccessorBST and M510-InOrderSuccessorBSTII)

4.7 Build Order
This is essentially a dependency graph. Create a graph with all the projects. Then, remove
each node that doesn't have any outgoing links (essentially adding them to the build order), and
remove the edges that are going into that node.

4.8 First Common Ancestor
Essentially a DFS for the nodes you want to find, but when you find them, populate them up.
At some point, the two populated nodes will meet as right and left at a root node, and then
you want to populate that root node up and eventually return it. (this is solution for M236-LCAofBT)
(see E235-LCAofBST and M236-LCAofBT)

4.9 BST Sequences
See CTCI solution: You want to recursively weave each solution after popping off the root and
adding it to the prefix.
(similar topic questions, but not the same: M95-UniqueBSTII and M96-UniqueBST)

4.10

CHAPTER 2: LINKED LISTS

2.1: Remove Dups
If you're allowed a temporary buffer, iterate through the linked list one by one, and add each
next value to a HashSet. Before adding, check if it already is. If the next value is already in
the hashSet, delete it by skipping over the pointer.

If an extra value is not allowed, use two pointers. The first pointer will iterate one by one, and
for each one, the other pointer will move ahead one by one through the entire list and delete each
repeat. This will take O(N^2) time, while the other takes O(N) time and O(N) space complexity.
(see M82-RemoveDuplicatesFromSortedListII.java, E83-RemoveDuplicatesFromSortedListII for a similar
problem)

2.2: Return Kth to Last element
Have two pointers. Have a fast pointer be k steps ahead of the slow one. When the last one reaches
the end, the first one will be k elements away from the end.
(see M19-RemoveNthNodeFromEndOfList)

2.3 Delete Middle Node
Delete the current val by setting the node's val to the next one's val, and then deleting the
next node.
(see E237-DeleteMiddleNodeInLinkedList)

2.4 Partition
Create two different lists, one for the left side of the partition, one on the right side.
Iterate through each element of the list, and add to either list, then merge at the end.
(see M86-PartitionList)

2.5 Sum Lists
Basic question: create another linked list, and also use a carry-over variable.
(see M2-AddTwoNumbers.java)

Follow-up: what if they were reversed (meaning the end is the one's digit)?
(see M445-AddTwoNumbersII.java)

2.6 Palindrome
go halfway, reverse the right half, then check from there
(see E234-PalindromeLinkedList.java)

2.7 Intersection
you can tell if they intersect if the last node is equal by reference. You can check which node
intersects by making both lists the same length, and then pad the front until the first reference
is equal (pad the shorter list).
(see E160-IntersectionTwoLinkedLists.java)

2.8 Loop Detection
(see E141-LinkedListCycle.java) and (M142-LinkedListCycleII.java)
How to detect there is a linked list: fast and slow pointer. You shouldn't be concernerd that
the fast pointer will jump over the slow pointer, since that would mean a jump is: the fast is at
i+1th node, while the slow is at slow. Well, that means that the step before, the fast was at
(i+1)-2 = i-1, meanwhile, the slow is at i-1.

Part 2: How to find where the cycle starts?
difference between how much fast travels and how much slow travels is the difference between
the total length and the length of the portion before the cycle.
